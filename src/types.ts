export interface ElectronServiceOptions {
  /**
   * The path to the built app for testing. In a typical electron project this will be where
   * `electron-builder` is configured to output, e.g. `dist` by default. Required to be used with
   * `appName` as both are needed in order to generate a path to the electron binary.
   */
  appPath?: string
  /**
   * The name of the built app for testing. Required to be used with `appPath` as both are needed
   * in order to generate a path to the Electron binary.
   * 
   * It needs to match the name of the install directory used by `electron-builder`; this value is
   * derived from your `electron-builder` configuration and will be either the name property
   * (from `package.json`) or the `productName` property (from `electron-builder` config). You can find
   * more information regarding this in the `electron-builder` [documentation](https://www.electron.build/configuration/configuration#configuration).
   */
  appName?: string
  /**
   * The path to the electron binary of the app for testing. The path generated by using `appPath`
   * and `appName` is tied to `electron-builder` output, if you are implementing something custom then
   * you can use this.
   */
  binaryPath?: string
  /**
   * The version of electron that the app to be tested was built with. The service uses this value
   * to download the appropriate version of chromedriver. It is not required if you are specifying
   * a [`chromedriverCustomPath`](https://github.com/webdriverio-community/wdio-electron-service#chromedriverchromedrivercustompath-string).
   */
  electronVersion?: string
  /**
   * An array of string arguments to be passed through to the app on execution of the test run.
   * Electron [command line switches](https://www.electronjs.org/docs/latest/api/command-line-switches)
   * and some [Chromium switches](https://peter.sh/experiments/chromium-command-line-switches) can be
   * used here.
   */
  appArgs?: string[]
  /**
   * The browser command used to access the custom electron API.
   * @default api
   */
  customApiBrowserCommand?: string
}

export type ApiCommand = { name: string; bridgeProp: string };
export type WebdriverClientFunc = (this: WebdriverIO.Browser, ...args: unknown[]) => Promise<unknown>;
export type ElectronServiceApi = Record<string, { value: (...args: unknown[]) => Promise<unknown> }>;